# Copyright (c) 2019 - Endless
#
# This file is part of Azafea
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.


from importlib import import_module
from pathlib import Path

from .. import IntegrationTest

TEST_DIR = Path(__file__).parent


class TestEmptyMigrations(IntegrationTest):
    def test_make_empty_migration(self):
        self.run_subcommand('make-migration', 'test_make_empty_migration')

        migrations = list(self.migrations_dir.iterdir())
        assert len(migrations) == 1

        migration = migrations[0].read_text('utf-8')
        assert 'down_revision = None'
        assert 'depends_on = None' in migration
        assert "branch_labels = ('test_make_empty_migration',)" in migration
        assert '\n'.join([
            'def upgrade():',
            '    # ### commands auto generated by Alembic - please adjust! ###',
            '    pass',
            '    # ### end Alembic commands ###',
        ]) in migration
        assert '\n'.join([
            'def downgrade():',
            '    # ### commands auto generated by Alembic - please adjust! ###',
            '    pass',
        ]) in migration


class TestMigrations(IntegrationTest):
    handler_path = TEST_DIR / 'handler_module.py'

    def _list_migrations(self):
        return list(self.migrations_dir.iterdir())

    def test_make_migration(self, request):
        self.run_subcommand('make-migration', 'test_make_migration')

        generated_migrations = self._list_migrations()
        assert len(generated_migrations) == 1

        with open(generated_migrations[0], 'r') as f:
            migration = f.read()

        assert 'down_revision = None'
        assert 'depends_on = None' in migration
        assert "branch_labels = ('test_make_migration',)" in migration
        assert '\n'.join([
            'def upgrade():',
            '    # ### commands auto generated by Alembic - please adjust! ###',
            "    op.create_table('migration_event',"
        ]) in migration
        assert '\n'.join([
            'def downgrade():',
            '    # ### commands auto generated by Alembic - please adjust! ###',
            "    op.drop_table('migration_event')",
            '    # ### end Alembic commands ###',
        ]) in migration

    def test_migratedb(self):
        Event = import_module(self.handler_module).Event

        self.run_subcommand('make-migration', 'test_migratedb')
        self.ensure_no_tables()

        generated_migrations = self._list_migrations()
        assert len(generated_migrations) == 1

        self.run_subcommand('migratedb')
        self.ensure_tables(Event)

    def test_one_more_migration(self):
        Event = import_module(self.handler_module).Event

        self.run_subcommand('make-migration', 'test_one_more_migration')
        self.ensure_no_tables()

        generated_migrations = self._list_migrations()
        assert len(generated_migrations) == 1

        first_migration = generated_migrations[0]

        with open(first_migration, 'r') as f:
            for line in f:
                if line.startswith('Revision ID: '):
                    first_rev = line.strip()[13:]

        self.run_subcommand('migratedb')
        self.ensure_tables(Event)

        self.run_subcommand('make-migration', 'test_one_more_migration')

        generated_migrations = self._list_migrations()
        assert len(generated_migrations) == 2

        new_migrations = [m for m in generated_migrations if m != first_migration]
        assert len(new_migrations) == 1

        new_migration = new_migrations[0]

        with open(new_migration, 'r') as f:
            migration_text = f.read()

        assert f"down_revision = '{first_rev}'" in migration_text
        assert 'depends_on = None' in migration_text
        assert "branch_labels = None" in migration_text
        assert '\n'.join([
            'def upgrade():',
            '    # ### commands auto generated by Alembic - please adjust! ###',
            '    pass',
            '    # ### end Alembic commands ###',
        ]) in migration_text
        assert '\n'.join([
            'def downgrade():',
            '    # ### commands auto generated by Alembic - please adjust! ###',
            '    pass',
        ]) in migration_text
